/*!
\page standard Coding Standards
\author Flameeyes

These are the standards used in the new code wrote for Hypnos (and the ones
we'll follow when editing old code). Are all suggestions, there is no
imposition, but we hope we can follow them.

For tabulations we use the regular tab character ('\\t'), with width of 8
spaces.

All the files should have this header:

\code
/*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*
| Hypnos UO Server Emulator                                                |
|                                                                          |
| This software is free software released under GPL2 license.              |
| You can find detailed license information in hypnos.cpp file.            |
|                                                                          |
*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\/
\endcode

\note The backslash before the slash at end of block is to avoid the end
	of the doxygen comment block :)

\section iden Identation

For indentation, we should use this form, inserting a linebreak after the
function declaration and then have the trigraph by themselves in two lines.

The only thing which can be after a closing trigraph is the 'else' after
an if.

Examples:

\code	void func(...)
	{
		<code>
	}
	
	
	if (...)
	{
		<code>
	} else {
		<code>
	}
\endcode

\section cond Conditions

Please note that if you have a single big if like this:

\code	if ( condition )
	{
		a lot of code...
	} else
		return;
\endcode

or variation of this, please change it to

\code	if ( ! condition ) return;
	
	a lot of code...
\endcode

So we have a more readable code.

\section sers Pointers and serials

Serials are used by UO protocol to identify a single character or an item.
We use serials only when interfacing with the UO protocol, with the scripts
or with the savegames. For any other thing inside the server code, please
only use pointes.

Please \b never check two getSerial() against.
This code requires the call of two (inlines) functions and then check the
returned values:

\code a->getSerial() == b->getSerial() \endcode

Instead of do the thing above, test directly the two pointers, because the
getSerial() function is unique for all the instances. This code check only
two pointer values:

\code a == b \endcode

\see cSerializable

\section includes How to include header files

This section can seems stupid for a developer documentation, but I think is
important to know how to deal with headers file in a so big (in term of files
and classes) project.

All the headers need to have a #ifndef / #define / #endif block, and within
this the classes can be defined.
The macro defined should be extracted from the filename. In the form
__DIR_SUBDIR_SUBDIR_FILENAME_H__ . So for example for objects/citem/cmulti.h
the macro is __OBJECTS_CITEM_CMULTI_H__ (go search, it's actually this :) ).

In a .h you shouldn't include other big .h such as cchar.h or citem.h if you
aren't defining a subclass or \b actually need these. If you need simply a
pointer to a cItem instance or similar things, you can use the common_libs.h
file which (in turn) includes typedefs.h where all the pinters you need are
defined.

\note Please include only the needed headers in all the source unit: have a
	list of twenty includes in a file make its readability quite low.

\section list-vs-slist List vs Singly-linked lists

If you taked a look to the sources of Hypnos, you'd found that we did a massive
use of slist (singly-linked lists) instead of classical lists. Why this?

We have a lot of lists and for every list's element, a singly-linked saves
about 4 bytes, and several CPU cycles :) I know isn't a big performance boost,
but we never cycle a list in the reverse order, so use the singly-listed isn't
a problem :)

So if you want to add a list of something in Hypnos sources, please use slist 
if you know you'll not use the reverse order (or you'll use it so rarely that
a cycle or two more can't create problems to the rest of the emulator).

*/
