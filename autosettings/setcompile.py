# -*- coding: UTF-8 -*-

from xml.dom import *
from xml.dom.minidom import *

class Setting:
	name = ''
	type = 'string'
	default = ''
	description = 'A setting'
	flagnum = 0

class Group:
	grName = ''
	settings = []

groups = []

def toCType(type):
	if type == 'string': return 'std::string'
	if type == 'uint32': return 'uint32_t'
	if type == 'uint16': return 'uint16_t'
	if type == 'uint8': return 'uint8_t'
	if type == 'int32': return 'int32_t'
	if type == 'int16': return 'int16_t'
	if type == 'int8': return 'int8_t'
	if type == 'flag': return 'bool'
	return None

def toVarFunc(type):
	if type == 'string': return 'String'
	if type == 'uint32': return 'UInt32'
	if type == 'uint16': return 'UInt16'
	if type == 'uint8': return 'UInt8'
	if type == 'int32': return 'Int32'
	if type == 'int16': return 'Int16'
	if type == 'int8': return 'Int8'
	return None

def formatC(setting):
	if setting.type == 'string': return '"' + setting.default + '"'
	return setting.default

settings = parse('setdesc.xml')
assert settings.documentElement.tagName == 'autosettings'

n = settings.documentElement.firstChild

while n != None:
	if n.nodeType != Node.ELEMENT_NODE:
		n = n.nextSibling
		continue
	
	assert n.tagName == "group"
	g = Group()
	g.grName = n.getAttribute("name")
	
	setn = n.firstChild
	while setn != None:		
		if setn.nodeType != Node.ELEMENT_NODE:
			setn = setn.nextSibling
			continue

		s = Setting()
		s.name = setn.getAttribute("name")
		s.type = setn.getAttribute("type")
		s.default = setn.getAttribute("default")
		setn.normalize()
		s.description = setn.childNodes.item(0).data
		
		assert(s.name)
		assert(s.type)
		g.settings.append(s)
		
		setn = setn.nextSibling
		
	groups.append(g)
	
	n = n.nextSibling

settings.unlink()

# Open files and output headers

unitcpp = open('settings.cpp', 'w')
unith = open('settings.h', 'w')

unith.write("""
// This is an autogenerated file. Please do not modify it manually.
// To modify settings, edit setdesc.xml file.

#ifndef __SETTINGS_H__
#define __SETTINGS_H__

#include "common_libs.h"

namespace nSettings {


""")

unitcpp.write("""
// This is an autogenerated file. Please do not modify it manually.
// To modify settings, edit setdesc.xml file.

#include "settings.h"

namespace nSettings {

""")

# Calculate flags count

flagcount = 0

for group in groups:
	for setting in group.settings:
		if type != 'flag': continue
		flagcount += 1

flagvars = flagcount / 64 +1

# Prepare flags constants and defaults

flagvar = 0
flagbit = 0

defaults = []
defaults.append("") # first flag

for group in groups:
	unitcpp.write("namespace " + group.grName + " {\n")
	for setting in group.settings:
		if setting.type != 'flag': continue
		
		if setting.default == 'on':
			defaults[flagvar] += "\n\t | n" + group.grName + "::flag" + setting.name
		
		unitcpp.write("\tstatic const uint64_t flag" + setting.name + " = " + hex(1 << flagbit) + ";\n");
		
		setting.flagnum = flagvar
		
		flagbit += 1
		if flagbit >= 64:
			flagvar += flagbit/64
			flagbit %= 64
			defaults.append("")
	
	unitcpp.write("}\n")

unitcpp.write("\n\n")

for i in range(0, flagvars):
	unitcpp.write("static uint64_t flags" + str(i) + " = 0" + defaults[i] + ";\n\n\n")

# Handle normal settings

for group in groups:
	unith.write("\tnamespace " + group.grName + " {\n")
	unitcpp.write("namespace " + group.grName + " {\n")
	
	# First pass: declarations
	for setting in group.settings:
		unith.write(
			"\t\t" + toCType(setting.type) + " get" + setting.name + "();\n"
			"\t\tvoid set" + setting.name + "(" + toCType(setting.type) + ");\n\n"
			);
		
		if setting.type == 'flag':
			unitcpp.write(
				"\tbool get" + setting.name + "()\n"
				"\t{ return flags" + str(setting.flagnum) + " & flag" + setting.name + "; }\n"
				"\n"
				"\t void set" + setting.name + "(bool on)\n"
				"\t{ if ( on ) flags" + str(setting.flagnum) + " |= flag" + setting.name +
				"; else flags" + str(setting.flagnum) + " &= ~flag" + setting.name + "; }\n"
				"\n"
				)
		else:
			unitcpp.write(
				"\tstatic " + toCType(setting.type) + " m_" + setting.name + " = " + formatC(setting) + ";\n"
				"\n"
				"\t" + toCType(setting.type) + " get" + setting.name + "()\n"
				"\t{ return m_" + setting.name + "; }\n"
				"\n"
				"\tvoid set" + setting.name + "(" + toCType(setting.type) + " newval)\n"
				"\t{ m_" + setting.name + " = newval; }\n"
				"\n"
				)
	
	# Second pass: load() function
	
	unitcpp.write(
		"\tvoid load(MXML::Node *n) {\n"
		"\t{\n"
		"\t\tdo {\n"
		)
	
	first = True
	for setting in group.settings:
		unitcpp.write("\t\t\t")
		
		if not first:
			unitcpp.write("else ")
		else:
			first = False
		
		unitcpp.write(
			"if ( n->name() == \"" + setting.name + "\" )\n"
			"\t\t\t{\n"
			)
		
		if setting.type == 'flag':
			unitcpp.write(
				'\t\t\t\tif ( ! n->hasAttribute("enabled") || \n'
				'\t\t\t\t\t( n->getAttribute("enabled") != "false" && n->getAttribute("enabled") != "true" ) )\n'
				'\t\t\t\t{\n'
				'\t\t\t\t\tLogWarning("Invalid value for setting ' + setting.name + '");\n'
				'\t\t\t\t} else {\n'
				'\t\t\t\t\tset' + setting.name + '(n->getAttribute("enabled") == "true");\n'
				'\t\t\t\t}\n'
				)
		else:
			unitcpp.write(
				"\t\t\t\tcVariant v = n->data();\n"
				"\t\t\t\tbool result = false;\n"
				"\t\t\t\t" + toCType(setting.type) + " tempo = v.to" + toVarFunc(setting.type) + "(&result);\n"
				"\t\t\t\telse LogWarning(\"Invalid value for parameter " + setting.name + "\");\n"
				)
		
		unitcpp.write("\t\t\t}\n")
	
	unitcpp.write("""
			else LogWarning("Unknown node %s in settings.xml, ignoring", n->name().c_str() );
			n = n->next();
		} while(n);
	}
""")
	
	unith.write("\t} // namespace " + group.grName + "\n")
	unitcpp.write("} // namespace " + group.grName + "\n")
	
# Second pass in groups: the global load() function!
unitcpp.write("""
void nSettings::load()
{
	//! \todo Need do define a better way to find out the default settings file.
	std::ifstream xmlfile("xmls/settings.xml");
	
	try {
		MXML::Document doc(xmlfile);
		
		MXML::Node *n = doc.main()->child();
		do {
""")

first = True
for group in groups:
	unitcpp.write("\t\t\t")
	
	if not first:
		unitcpp.write("else ")
	else:
		first = False
	
	unitcpp.write(
		"if ( n->name() == \"" + group.grName + "\" )\n"
		"\t\t\t\t" + group.grName + "::load(n);\n"
		)

unitcpp.write("""
			else
				LogWarning("Unknown node %s in settings.xml, ignoring", n->name().c_str() );
			
			n = n->next();
		} while(n);
	} catch ( MXML::MalformedError e) {
		LogCritical("settings.xml file not well formed. Default loading");
	}
}
""")

# Cleanup...
unitcpp.write("""
} // namespace

""")
unitcpp.close()

unith.write("""
} // namespace

#endif

""")
unith.close()
