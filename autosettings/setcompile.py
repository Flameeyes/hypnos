# -*- coding: UTF-8 -*-

from xml.dom import *
from xml.dom.minidom import *

class Setting:
	setName = ''
	setType = 'string'
	setDefault = ''
	setDescription = 'A setting'

class Group:
	grName = ''
	settings = []

groups = []

def toCType(type):
	if type == 'string': return 'std::string'
	if type == 'uint32': return 'uint32_t'
	if type == 'uint16': return 'uint16_t'
	if type == 'uint8': return 'uint8_t'
	if type == 'int32': return 'int32_t'
	if type == 'int16': return 'int16_t'
	if type == 'int8': return 'int8_t'
	return None

settings = parse('setdesc.xml')
assert settings.documentElement.tagName == 'autosettings'

n = settings.documentElement.firstChild

while n != None:
	if n.nodeType != Node.ELEMENT_NODE:
		n = n.nextSibling
		continue
	
	assert n.tagName == "group"
	g = Group()
	g.grName = n.getAttribute("name")
	
	setn = n.firstChild
	while setn != None:		
		if setn.nodeType != Node.ELEMENT_NODE:
			setn = setn.nextSibling
			continue

		s = Setting()
		s.setName = setn.getAttribute("name")
		s.setType = setn.getAttribute("type")
		s.setDefault = setn.getAttribute("default")
		setn.normalize()
		s.setDescription = setn.childNodes.item(0).data
		
		assert(s.setName)
		assert(s.setType)
		g.settings.append(s)
		
		setn = setn.nextSibling
		
	groups.append(g)
	
	n = n.nextSibling

settings.unlink()

unitcpp = open('settings.cpp', 'w')
unith = open('settings.h', 'w')

unith.write("""
// This is an autogenerated file. Please do not modify it manually.
// To modify settings, edit setdesc.xml file.

#ifndef __SETTINGS_H__
#define __SETTINGS_H__

namespace nSettings {
""")

for group in groups:
	unith.write("\tnamespace n" + group.grName + " {\n")
	
	for setting in group.settings:
		unith.write("\t\t" + toCType(setting.setType) + " get" + setting.setName +
			"();\n");
	
	unith.write("\t} // namespace n " + group.grName + "\n")

# Cleanup...
unitcpp.close()

unith.write("""
} // namespace

#endif

""")
unith.close()
